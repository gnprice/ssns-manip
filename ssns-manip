#!/usr/bin/env python

from dataclasses import dataclass
from datetime import datetime, timedelta
import io
import os
import re
import struct
import sys
from typing import List, Optional, Tuple

import click


def log(*args):
    print(*args, file=sys.stderr)


@dataclass
class Instruction:
    '''What to do with a particular command.'''
    offset: int
    command_type: int

    should_omit: bool


def parse_instructions(filename):
    '''
    Parse an instructions file.

    This is a format we made up right here; see CLI usage message for
    description.
    '''
    # And really the details of the format are mostly up to ccl_ssns.py.

    instructions = []
    with open(filename, 'r') as f:
        for line in f:
            m = re.search('^(x )?([0-9a-f]{8}): C(\d+)',
                          line)
            if not m:
                raise click.ClickException(f"Can't parse instruction: {line}")

            should_omit = (m[1] is not None)
            offset = int(m[2], 16)
            command_type = int(m[3])

            instructions.append(Instruction(
                offset=offset, command_type=command_type, should_omit=should_omit))

    return instructions


windows_epoch = datetime.fromisoformat('1601-01-01')

one_microsecond = timedelta(microseconds=1)

def int_of_timestamp(dt: datetime) -> int:
    '''
    Intify the timestamp in the quirky format Chrome uses here.
    '''
    # See TimestampToString:
    #   https://chromium.googlesource.com/chromium/src.git/+/refs/tags/89.0.4389.90/components/sessions/core/command_storage_backend.cc#341
    return (dt - windows_epoch) // one_microsecond


def open_output_file(output_dir: str) -> Tuple[str, io.BufferedWriter]:
    '''
    Create and open our output file at an appropriate filename.
    '''
    latest_existing = 0
    for name in os.listdir(output_dir):
        m = re.fullmatch('Session_(\d+)', name)
        if m:
            latest_existing = max(latest_existing, int(m[1]))

    now = int_of_timestamp(datetime.utcnow())
    timestamp = max(now, latest_existing + 1)

    while True:
        try:
            path = os.path.join(output_dir, f'Session_{timestamp}')
            f = open(path, 'xb')
            return (path, f)
        except FileExistsError:
            timestamp += 1


# These follow definitions in Chromium upstream:
#   https://chromium.googlesource.com/chromium/src.git/+/refs/tags/89.0.4389.90/components/sessions/core/command_storage_backend.cc#341
k_file_signature = b'SNSS'
k_file_version_1 = 1
k_file_version_with_marker = 3

def write_results(
        f_out: io.BufferedWriter,
        f_in: io.BufferedReader,
        instructions: Optional[List[Instruction]]):
    header_bytes = f_in.read(8)
    if header_bytes[:4] != k_file_signature:
        raise ClickException('Input is not an SNSS file')

    format_version, = struct.unpack('<i', header_bytes[4:])
    if format_version not in (k_file_version_1, k_file_version_with_marker):
        raise ClickException(f'Input has unexpected version: {format_version}')

    f_out.write(header_bytes)

    i = 0
    while True:
        offset = f_in.tell()

        size_bytes = f_in.read(2)
        if not size_bytes:
            # EOF
            if instructions is not None and i < len(instructions):
                raise ClickException(f'Too many instructions; input consumed before line {i+1}')
            break
        size, = struct.unpack('<H', size_bytes)

        command_bytes = f_in.read(size)

        command_type = command_bytes[0]

        if instructions is not None:
            if i >= len(instructions):
                raise ClickException(
                    f'Ran out of instructions; commands continue at offset 0x{offset:08x}')
            instruction = instructions[i]
            i += 1

            if offset != instruction.offset:
                raise ClickException(f'Offset mismatch: next command is at 0x{offset:08x}'
                                     + f' but instruction is for 0x{instruction.offset:08x}')

            if command_type != instruction.command_type:
                raise ClickException(
                    f'Command type mismatch: command at 0x{offset:08x}'
                    + f' has type {command_type} but expected {instruction.command_type}')

            if instruction.should_omit:
                continue

        f_out.write(size_bytes + command_bytes)


@click.command()
@click.argument('input_file')
@click.argument('output_dir')
@click.option('-f', 'instructions_file', metavar='FILE',
        help='File with instructions for how to edit.')
def main(input_file, output_dir, *, instructions_file):
    '''
    Make an edited version of a Chrome or Chromium session file.

    The edited version will be written as the newest Session_* file
    in OUTPUT_DIR.

    If no instructions are provided, the file will be copied
    unmodified.

    With `-f`, the given instructions should be based on the output of
    ccl_ssns.py.  Each line indicates what to do with the corresponding
    command in the file.  The line should be either:

     * unmodified, to copy the command unmodified to the output; or

     * have "x " inserted at the beginning, to skip the command.
    '''

    instructions = None
    if instructions_file is not None:
        instructions = parse_instructions(instructions_file)
        log(f'{len(instructions)} instructions read.')

    f_in = open(input_file, 'rb')

    path, f_out = open_output_file(output_dir)
    log(f'Writing output to: {path}')
    write_results(f_out, f_in, instructions)
    f_out.close()


if __name__ == '__main__':
    main()
